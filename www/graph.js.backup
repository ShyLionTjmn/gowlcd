'use strict';

const tooltipPlugin = Chart.registry.getPlugin('tooltip');

tooltipPlugin.positioners.bottom = function(items) {
  const pos = tooltipPlugin.positioners.average(items);

  // Happens when nothing is found
  if (pos === false) {
    return false;
  }

  const chart = this._chart;

  return {
    x: pos.x,
    y: chart.chartArea.top,
  };
};

function get_graph_div(title, graph_class, obj, id, graph_keys, graph_options, close_key) {
  let ret=$(DIV)
   .addClass("graph_div")
   .addClass(graph_class)
   .text(title)
   .data("obj", obj)
   .data("id", id)
   .data("keys", graph_keys)
   .data("close_key", close_key)
   .append( $(DIV)
     .append( $(LABEL).text("Обновить").addClass("button")
       .addClass("refresh")
       .click(function() {
         let gd=$(this).closest(".graph_div");
         let chart=gd.data("chart");
         let end=unix_timestamp();
         let start=end-3600;
         let obj=gd.data("obj");
         let id=gd.data("id");
         let data_keys=gd.data("keys");
         let gk=keys(data_keys);
         gk.sort(function(a,b) { return data_keys[a]['_order'] - data_keys[b]['_order']; });
         run_query({"action": "graph", "object": obj, "id": id, "keys": gk, "start": start.toString(), "end": end.toString()}, function(qres) {
           let chart_data = qres["ok"];

           for(let i in chart_data.datasets) {
             if(typeof(data_keys[chart_data.datasets[i]['label']]) !== 'undefined') {
               let field = chart_data.datasets[i]['label'];
               for(let opt in data_keys[field]) {
                 if(opt != "_order") {
                   chart_data.datasets[i][opt] = data_keys[field][opt];
                 };
               };
             };
           };

           chart.data = chart_data;
           chart.update('none');
         });
       })
     )
     .append( $(LABEL).text("X").addClass("button")
       .title("Close this graph. Ctrl-click closes all!")
       .css({"float": "right"})
       .addClass("close")
       .click(function(e) {
         if(e.ctrlKey) {
           $(".graph_div").remove();
           del_local(/^graph_/);
         };
         let gd=$(this).closest(".graph_div");
         let close_key=gd.data("close_key");
         del_local(close_key);
         gd.remove();
       })
     )
   )
   .append( $(DIV)
     .css({"width": "800px", "height": "200px"})
     .css({"border": "1px solid black"})
     .append( $(CANVAS) )
     .resizable({handles: "s,e"})
   )
  ;

  let ctx=ret.find("CANVAS");

  let options={ type: 'line',
    options: {
      animation: false,
      maintainAspectRatio: false,
      elements: {
        point: {
          radius: 0 // default to disabled in all datasets
        }
      },
      plugins: {
        tooltip: {
          position: 'bottom',
        },
      },
      interaction: {
        intersect: false,
        mode: 'index',
      },
      normalized: true,
      //parsing: false,
      locale: "ru-RU",
      scales: {
        x: {
          type: 'timeseries',
          time: {
            round: 'second',
            isoWeekday: true,
            tooltipFormat: 'd LLL yyyy HH:mm',
            displayFormats: {
              second: "HH:mm:ss",
              minute: "HH:mm",
              hour: "HH:mm",
              day: "d LLL HH:mm",
              week: "d LLL HH:mm",
              month: "d LLL HH:mm",
              quarter: "d LLL HH:mm",
              year: "d LLL YYYY HH:mm",
            },
          },
        },
        y: { beginAtZero: true, },
      },
    }
  };


  if(typeof(graph_options) !== 'undefined') {
    $.extend(true, options, graph_options);
  };

  let chart = new Chart(ctx, options);

  ret.data("chart", chart);

  return ret;
};
